# 函数代码块以 def 关键次开头，后接函数标识符名称和圆括号()
# 任何传输入参数和自变量必须放在圆括号中间，圆括号之间可以用于定义参数
# 函数的第一行语句可以选择性地使用文档字符串-用于存放函数说明
# 函数内容以冒号起始，并且缩进
# return[表达式]结束函数，选择性地返回一个值给调用方，不带表达式的return相当于返回None
# 定义一个函数
# def method(a):
#     """
#     三个冒号
#     :param a:用于说明a的作用
#     :return:返回一个值 a+2
#     """
#     print(a)
#     return a+2
#
# print(method(2))

# 函数的参数--必须参数：
# 如果在函数内有参数，且我们在调用的过程中，没有给参数进行传参，则会报错
# --默认参数
# 调用函数时，如果没有传递参数，则会使用默认参数
# 默认参数在定义函数的时候定义
# 默认值只会执行一次，默认值为可变对象时很重要
# def method(a==1):
# def method(a,b==[]):

# --关键字参数
# kwarg=value形式，在调用函数时添加
# 在函数调用/定义中，关键字参数必须跟随在位置参数的后面
# 当存在一个形式为**name的一个形参时，它会接受一个字典
# 形式为*name，接收一个包含除了与已有形参列表以外的位置参数的 元祖 的形参
# 两个*号为字典传参，一个*号为元祖传参
# def method(**a):
#     print(a.keys())
# method(a=1,b=2,c=3)
# def method(*a):
#     print(a[0])
#     print(a[1])
#     print(a[2])
# method( 1,2,3)

# --特殊参数
# *号：仅限关键字参数，在【仅限关键字】形参前放置一个*号
# def method(*,a):
#     print(a)
# method(a=1)

# --解包参数列表
# *号用来解包元祖
# **号用来解包字典
# print(list(range(3, 6)))
#
# list_a = (3,6)
# list(range(*list_a))

# def method(a,b,c):
#     print(a)
#     print(b)
#     print(c)
#
# dic1 = {"a":1,"b":2,"c":3}
# method(**dic1)

# lambda表达式
# 可以用lambda关键字来创建一个小的匿名函数
# lambda的主体是一个表达式，而不是一个代码块，仅仅能在lambda表达式中封装有限的逻辑进去
# y = lambda x,y,z:x+y+z
# print(y(2,3,4))